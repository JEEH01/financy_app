name: Distribute to Firebase

on:
  workflow_dispatch:
    inputs:
      target:
        description: "The environment to what this action will distribute the build to"
        type: choice
        required: true
        options: 
        - prod
        - adhoc
        


env:
  JAVA_VERSION: 17
  FLUTTER_VERSION: '3.16.7'
  FLUTTER_CHANNEL: 'stable'
  PROFILE_NAME: financy_${{inputs.target}}
  GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/gsa.json
  GRAPHQL_ENDPOINT: ${{ secrets.GRAPHQL_ENDPOINT }}

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: ${{ env.FLUTTER_CHANNEL }}
          cache: true
      
      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install the Apple certificate and provisioning profile
        env:
          DISTRIBUTION_CERTIFICATE_BASE64: ${{ secrets.DISTRIBUTION_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          ADHOC_PROVISION_PROFILE_BASE64: ${{ secrets.ADHOC_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          PP_PATH=$RUNNER_TEMP/$PROFILE_NAME.mobileprovision
          CERTIFICATE_PATH=$RUNNER_TEMP/financy-distribution-certificate.p12
          # import certificate and provisioning profile from secrets
          echo -n "$DISTRIBUTION_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$ADHOC_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH
          
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security default-keychain -s $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          
          # import certificate to keychain
          security import "$CERTIFICATE_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          security set-key-partition-list -v -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security list-keychains
          
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp "$PP_PATH" ~/Library/MobileDevice/Provisioning\ Profiles
          
      - name: Build iOS app
        run: flutter build ipa --export-options-plist=ios/ExportOptions-${PROFILE_NAME}.plist --dart-define=$GRAPHQL_ENDPOINT
      
      - name: Install Firebase CLI and Setup Service Account
        env:
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
        run: |
            npm install -g firebase-tools
            echo -n "$GOOGLE_SERVICE_ACCOUNT_JSON" > ${{ github.workspace }}/gsa.json

      - name: Upload IPA to Firebase App Distribution
        run: |
            FILE_PATH=$(find build/ios -name '*.ipa' -print -quit) && [ -n "$FILE_PATH" ]

            firebase appdistribution:distribute $FILE_PATH \
            --app ${{ secrets.FIREBASE_IOS_APP_ID }} \
            --groups 'testers' \
            --debug


      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_NAME.mobileprovision